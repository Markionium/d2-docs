{
    "id": "Model",
    "pageType": "api",
    "name": "Model",
    "moduleName": "model/Model",
    "methods": [
        {
            "params": [
                {
                    "tagDef": {
                        "name": "param",
                        "multi": true,
                        "docProperty": "params",
                        "transforms": [
                            null,
                            null,
                            null
                        ]
                    },
                    "tagName": "param",
                    "description": "ModelDefinition from which the model should be created",
                    "startingLine": 154,
                    "typeExpression": "ModelDefinition",
                    "type": {
                        "type": "NameExpression",
                        "name": "ModelDefinition"
                    },
                    "typeList": [
                        "ModelDefinition"
                    ],
                    "name": "modelDefinition"
                }
            ],
            "returns": {
                "tagDef": {
                    "name": "returns",
                    "aliases": [
                        "return"
                    ],
                    "transforms": [
                        null,
                        null
                    ]
                },
                "tagName": "returns",
                "description": "Returns an instance of the model.",
                "startingLine": 155,
                "typeExpression": "Model",
                "type": {
                    "type": "NameExpression",
                    "name": "Model"
                },
                "typeList": [
                    "Model"
                ]
            },
            "description": "The static method is a factory method to create Model objects. It calls `new Model()` with the passed `ModelDefinition`.\n\n```js\nlet myModel = Model.create(modelDefinition);\n```",
            "method": "create",
            "static": true,
            "codeName": "_createClass",
            "id": "_createClass",
            "aliases": [
                "_createClass"
            ],
            "name": "create"
        },
        {
            "inherited": true,
            "returns": {
                "tagDef": {
                    "name": "returns",
                    "aliases": [
                        "return"
                    ],
                    "transforms": [
                        null,
                        null
                    ]
                },
                "tagName": "returns",
                "description": "Returns a promise that resolves when the model has been saved\nor rejects with the result from the `validate()` call.",
                "startingLine": 25,
                "typeExpression": "Promise",
                "type": {
                    "type": "NameExpression",
                    "name": "Promise"
                },
                "typeList": [
                    "Promise"
                ]
            },
            "description": "Checks if the model is dirty. When the model is dirty it will check if the values of the model are valid by calling\n`validate`. If this is correct it will attempt to save the [Model](#/model/Model) to the api.\n\n```js\nmyModel.save()\n  .then((message) => console.log(message));\n```",
            "method": "save",
            "codeName": "save",
            "id": "save",
            "aliases": [
                "save"
            ],
            "name": "save"
        },
        {
            "inherited": true,
            "returns": {
                "tagDef": {
                    "name": "returns",
                    "aliases": [
                        "return"
                    ],
                    "transforms": [
                        null,
                        null
                    ]
                },
                "tagName": "returns",
                "description": "Promise that resolves with an object with a status property that represents if the model\nis valid or not the fields array will return the names of the fields that are invalid.",
                "startingLine": 60,
                "typeExpression": "Promise",
                "type": {
                    "type": "NameExpression",
                    "name": "Promise"
                },
                "typeList": [
                    "Promise"
                ]
            },
            "description": "This will run the validations on the properties which have validations set. Normally these validations are defined\nthrough the DHIS2 schema. It will check min/max for strings/numbers etc. Additionally it will\nrun model validations against the schema.\n\n```js\nmyModel.validate()\n .then(myModelStatus => {\n   if (myModelStatus.status === false) {\n     myModelStatus.fields.forEach((fieldName) => console.log(fieldName));\n   }\n});\n```",
            "method": "validate",
            "codeName": null,
            "id": "model/ModelBase",
            "aliases": [
                "model/ModelBase"
            ],
            "name": "validate"
        }
    ],
    "properties": [
        {
            "tagDef": {
                "name": "property",
                "multi": true,
                "docProperty": "properties",
                "transforms": [
                    null,
                    null,
                    null
                ]
            },
            "tagName": "property",
            "description": "Stores reference to the modelDefinition that was used when\ncreating the model. This property is not enumerable or writable and will therefore not show up when looping\nover the object properties.",
            "startingLine": 47,
            "typeExpression": "ModelDefinition",
            "type": {
                "type": "NameExpression",
                "name": "ModelDefinition"
            },
            "typeList": [
                "ModelDefinition"
            ],
            "name": "modelDefinition",
            "extraInfo": ""
        },
        {
            "tagDef": {
                "name": "property",
                "multi": true,
                "docProperty": "properties",
                "transforms": [
                    null,
                    null,
                    null
                ]
            },
            "tagName": "property",
            "description": "Represents the state of the model. When the model is concidered `dirty`\nthere are pending changes.\nThis property is not enumerable or writable and will therefore not show up when looping\nover the object properties.",
            "startingLine": 59,
            "typeExpression": "Boolean",
            "type": {
                "type": "NameExpression",
                "name": "Boolean"
            },
            "typeList": [
                "Boolean"
            ],
            "name": "dirty",
            "extraInfo": ""
        },
        {
            "tagDef": {
                "name": "property",
                "multi": true,
                "docProperty": "properties",
                "transforms": [
                    null,
                    null,
                    null
                ]
            },
            "tagName": "property",
            "description": "Values object used to store the actual model values. Normally access to the\nModel data will be done through accessor properties that are generated from the modelDefinition.",
            "startingLine": 72,
            "typeExpression": "Object",
            "type": {
                "type": "NameExpression",
                "name": "Object"
            },
            "typeList": [
                "Object"
            ],
            "name": "dataValues",
            "extraInfo": ""
        }
    ],
    "functions": [],
    "className": "Model",
    "docType": "class",
    "superClass": "ModelBase",
    "constructorFunction": {
        "params": [
            {
                "tagDef": {
                    "name": "param",
                    "multi": true,
                    "docProperty": "params",
                    "transforms": [
                        null,
                        null,
                        null
                    ]
                },
                "tagName": "param",
                "description": "The model definition that corresponds with the model.\nThis is essential defining what type the model is representing.",
                "startingLine": 28,
                "typeExpression": "ModelDefinition",
                "type": {
                    "type": "NameExpression",
                    "name": "ModelDefinition"
                },
                "typeList": [
                    "ModelDefinition"
                ],
                "name": "modelDefinition"
            }
        ],
        "description": "Will create a new model instanced based on the model definition. When creating a new instance the model\ndefinition needs to have both the modelValidations and modelProperties.\n\nThe model properties will depend on the ModelDefinition. A model definition is based on a DHIS2 Schema.",
        "constructor": "",
        "codeName": "Model",
        "id": "Model",
        "aliases": [
            "Model"
        ],
        "name": "Model"
    }
}